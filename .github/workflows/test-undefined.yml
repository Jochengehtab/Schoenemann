name: Build and Test on Windows and Linux with Bench Check

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup environment
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends clang++-18 make wget gnupg lsb-release
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 18
            sudo ln -sf /usr/bin/clang++-18 /usr/bin/clang++
          else
            choco install llvm -y
            choco install make -y
            # ensure llvm is on the PATH
            echo "::add-path::C:\\Program Files\\LLVM\\bin"
          fi

      - name: Build (make all)
        shell: bash
        run: |
          cd src
          make all

      # ---- WINDOWS‐ONLY: upload the .exe so you can download it later ----
      - name: Upload Windows exe
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3   # uploads src/null.exe as "windows-null-exe" :contentReference[oaicite:0]{index=0}
        with:
          name: windows-null-exe
          path: src/null.exe

      # ---- OPTIONAL: demonstrate downloading it again (e.g. clean working dir) ----
      - name: (Re-)Download Windows exe
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v3  # pulls down the artifact by name :contentReference[oaicite:1]{index=1}
        with:
          name: windows-null-exe
          path: src/

      - name: Check for Bench number in commit message
        id: bench-check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if [[ $COMMIT_MSG =~ Bench[[:space:]]+([0-9]+) ]]; then
            echo "BENCH_NUM=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
            echo "No bench number found in commit message"
          fi

      - name: Run benchmark test
        if: env.BENCH_NUM
        shell: bash
        run: |
          cd src
          if [[ -f null.exe ]]; then
            BINARY=./null.exe
          else
            BINARY=./null
          fi
          OUTPUT=$($BINARY bench)
          echo "Bench output: $OUTPUT"
          if [[ $OUTPUT =~ Nodes[[:space:]]*:[[:space:]]*([0-9]+) ]]; then
            OUTPUT_NODES="${BASH_REMATCH[1]}"
          else
            echo "Failed to extract nodes number from output"
            exit 1
          fi
          echo "Expected bench number: ${{ env.BENCH_NUM }}"
          if [ "$OUTPUT_NODES" -ne "${{ env.BENCH_NUM }}" ]; then
            echo "Bench number mismatch: expected ${{ env.BENCH_NUM }}, got $OUTPUT_NODES"
            exit 1
          fi
