name: Build and Test on Windows and Linux with Bench Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-18 make
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100

      - name: Set up environment
        if: runner.os == 'Windows'
        run: |
          choco install llvm --version=18.0
          choco install make

      - name: Build with make all
        run: |
          cd src
          make all

      - name: Extract bench number from commit message
        id: extract-bench
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            echo "Commit message: $COMMIT_MSG"
            if [[ "$COMMIT_MSG" =~ Bench[[:space:]]+([0-9]+) ]]; then
              echo "bench_number=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            COMMITS=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].commit.message')
            for COMMIT_MSG in $COMMITS; do
              echo "Commit message: $COMMIT_MSG"
              if [[ "$COMMIT_MSG" =~ Bench[[:space:]]+([0-9]+) ]]; then
                echo "bench_number=${BASH_REMATCH[1]}" >> $GITHUB_ENV
                break
              fi
            done
          fi

      - name: Run bench test
        if: env.bench_number
        run: |
          cd src
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BENCH_OUTPUT=$(./null.exe bench)
          else
            BENCH_OUTPUT=$(./null bench)
          fi
          echo "Bench output: $BENCH_OUTPUT"
          if [[ "$BENCH_OUTPUT" =~ ([0-9]+) ]]; then
            OUTPUT_NUMBER=${BASH_REMATCH[1]}
            if [ "$OUTPUT_NUMBER" -eq "$bench_number" ]; then
              echo "Bench number matches: $OUTPUT_NUMBER"
            else
              echo "Bench number mismatch: expected $bench_number, got $OUTPUT_NUMBER"
              exit 1
            fi
          else
            echo "No bench number found in output."
            exit 1
          fi
