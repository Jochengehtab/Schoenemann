name: Build and Test on Windows and Linux with Bench Check

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup environment
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              clang++-18 make wget gnupg lsb-release
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh && sudo ./llvm.sh 18
            sudo ln -sf /usr/bin/clang++-18 /usr/bin/clang++
          else
            choco install llvm make -y
            # Ensure LLVM bin is on PATH
            echo "PATH=\"/c/Program Files/LLVM/bin:\$PATH\"" >> $GITHUB_ENV
          fi

      - name: Build with make all
        shell: bash
        run: |
          cd src
          make all

      - name: Check for bench number in commit message
        id: bench-check
        shell: bash
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG =~ Bench[[:space:]]+([0-9]+) ]]; then
            echo "BENCH_NUM=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          fi

      # Linux benchmark
      - name: Run benchmark on Linux
        if: matrix.os == 'ubuntu-22.04' && env.BENCH_NUM
        shell: bash
        run: |
          cd src
          [[ -f null ]] \
            || { echo "::error::null not found"; exit 1; }
          OUTPUT=$(./null bench)
          if [[ $OUTPUT =~ Nodes[[:space:]]*:[[:space:]]*([0-9]+) ]]; then
            [[ "${BASH_REMATCH[1]}" -eq "$BENCH_NUM" ]] \
              || { echo "::error::Mismatch: expected $BENCH_NUM, got ${BASH_REMATCH[1]}"; exit 1; }
          else
            echo "::error::Failed to parse nodes"; exit 1
          fi

      # Windows benchmark (use PowerShell for PE binary)
      - name: Run benchmark on Windows
        if: matrix.os == 'windows-latest' && env.BENCH_NUM
        shell: pwsh
        run: |
          Set-Location src
          if (-not (Test-Path .\null.exe)) {
            Write-Error "null.exe not found"; exit 1
          }
          $output = & .\null.exe bench
          if ($output -notmatch 'Nodes\s*:\s*(\d+)') {
            Write-Error "Failed to parse nodes"; exit 1
          }
          $nodes = $Matches[1]
          if ($nodes -ne $Env:BENCH_NUM) {
            Write-Error "Mismatch: expected $Env:BENCH_NUM, got $nodes"; exit 1
          }
